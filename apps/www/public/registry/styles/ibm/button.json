{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center text-sm font-medium transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none rounded-none\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-blue-600 text-white hover:bg-blue-500 focus:ring-blue-600 rounded-none\",\n        secondary:\n          \"bg-gray-800 text-white hover:bg-gray-700 focus:ring-gray-60 rounded-none\",\n        ghost:\n          \"bg-transparent text-blue-600 hover:bg-blue-50 focus:ring-blue-600 rounded-none\",\n        destructive:\n          \"bg-red-600 text-white hover:bg-red-500 focus:ring-red-600 rounded-none\",\n        outline:\n          \"border border-blue-600 text-blue-600 bg-white hover:bg-blue-50 focus:ring-blue-600 rounded-none\",\n        link: \"text-blue-600 underline hover:text-blue-500 focus:ring-blue-600 rounded-none\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2 rounded-none\",\n        sm: \"h-8 px-3 rounded-none\",\n        lg: \"h-12 px-6 rounded-none\",\n        icon: \"h-10 w-10 rounded-none\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    }
  ],
  "type": "components:ui"
}