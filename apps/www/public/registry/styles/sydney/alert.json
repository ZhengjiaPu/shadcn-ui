{
  "name": "alert",
  "files": [
    {
      "name": "alert.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion, type Variants } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 flex items-center space-x-2 transition-colors duration-300\",\n  {\n    variants: {\n      variant: {\n        info: \" border-blue-50 bg-blue-100 hover:bg-blue-200 hover:text-blue-800 transition-colors duration-300 \",\n        success: \"border-green-50 bg-green-100 hover:bg-green-200 hover:text-green-800 transition-colors duration-300 \",\n        warning: \"border-yellow-50 bg-yellow-100 hover:bg-yellow-200 hover:text-yellow-800 transition-colors duration-300 \",\n        error: \"border-red-50 bg-red-100 hover:bg-red-200 hover:text-red-800 transition-colors duration-300 \",\n        default: \"border-blue-50 bg-gray-100 text-gray-800\",\n      },\n      hoverEffect: {\n        true: \"hover:bg-opacity-75\",\n        false: \"\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      hoverEffect: false,\n    },\n  }\n);\n\n\nconst alertAnimations: Record<string, Variants> = {\n  default: {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n  },\n  success: {\n    initial: { opacity: 0, y: -20 },\n    animate: { opacity: 1, y: 0 },\n  },\n  info: {\n    initial: { x: -100, opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n  },\n  warning: {\n    initial: { x: 100, opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n  },\n  error: {\n    initial: { opacity: 0, scale: 0.8 },\n    animate: { opacity: 1, scale: 1 },\n  },\n};\n\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> &\n    VariantProps<typeof alertVariants> & {\n      animate?: boolean; \n    }\n>(({ className, variant, hoverEffect, animate = false, ...props }, ref) => {\n  const motionProps = animate ? alertAnimations[variant || \"default\"] : null;\n\n  const alertContent = (\n    <div\n      ref={ref}\n      role=\"alert\"\n      className={cn(alertVariants({ variant, hoverEffect }), className)}\n      {...props}\n    />\n  );\n\n  return animate ? (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"initial\"\n      variants={motionProps}\n      transition={{ repeat: Infinity, repeatType: \"loop\", duration: 2 }}\n    >\n      {alertContent}\n    </motion.div>\n  ) : (\n    alertContent\n  );\n});\nAlert.displayName = \"Alert\";\n\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\n\nexport { Alert, AlertTitle, AlertDescription };\n"
    }
  ],
  "type": "components:ui"
}